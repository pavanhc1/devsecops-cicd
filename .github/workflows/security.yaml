name: Full Security Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  security-tests:
    runs-on: ubuntu-latest
    permissions: write-all

    steps:
      # Set up Docker Buildx (required for building and scanning images)
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # Checkout the code
      - name: Checkout Code
        uses: actions/checkout@v3

      # Get values from config.json
      - name: Parse config.json
        run: |
          IMAGE_NAME=$(jq -r '.image_name' config.json)
          echo "IMAGE_NAME=${IMAGE_NAME}" >> $GITHUB_ENV

      # Verify IMAGE_NAME
      - name: Verify IMAGE_NAME
        run: echo "IMAGE_NAME is $IMAGE_NAME"

      # Set up Python for static code analysis
      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: 3.8

      # Install dependencies
      - name: Install Dependencies
        run: |
          pip install -r requirements.txt

      # Static Code Analysis with Bandit
      - name: Static Code Analysis with Bandit
        run: |
          pip install bandit
          bandit -r app/

      # Dependency Scan with Snyk CLI
      - name: Dependency Scan with Snyk
        run: |
          docker pull snyk/snyk:python-3.11
          docker run --rm -e SNYK_TOKEN=${{ secrets.SNYK_TOKEN }} -v $(pwd):/project -w /project snyk/snyk:python-3.11 snyk test --file=requirements.txt --token=$SNYK_TOKEN

      # Docker Build and Container Scan with Trivy
      - name: Docker Build and Container Scan with Trivy
        run: |
          set -e  # Exit immediately if any command fails

          echo "Verifying Docker setup..."
          docker info

          IMAGE_NAME="flask-app"

          echo "Building the Docker image..."
          docker build -t library/$IMAGE_NAME .

          echo "Verifying if the image was built successfully..."
          docker inspect --type=image library/$IMAGE_NAME:latest > /dev/null || { echo "Image build failed"; exit 1; }

          echo "Logging into Docker Hub..."
          echo ${{ secrets.DOCKER_PASSWORD }} | docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin

          echo "Running Trivy scan..."
          docker pull aquasec/trivy:0.57.1
          docker run --rm \
            -v /var/run/docker.sock:/var/run/docker.sock \
            aquasec/trivy:0.57.1 \
            image library/$IMAGE_NAME

      # Secrets Scanning with Gitleaks
      - name: Secrets Scanning with Gitleaks
        uses: zricethezav/gitleaks-action@v2
        with:
          args: --no-git --path=.
                
      # Run Flask application container
      - name: Run Flask App
        run: |
          docker run -d --name flask-app -p 5001:5001 \
            -e DATABASE_URL=${{ secrets.DATABASE_URL }} \
            -e SECRET_KEY=${{ secrets.SECRET_KEY }} \
            flask-app
            
      # Inspect the container status
      - name: Debug Flask Container
        run: |
          docker ps -a
          docker logs flask-app

      # Wait for Flask App to start
      - name: Wait for Flask App to Start
        run: |
          for i in {1..20}; do
            if curl -s http://localhost:5001 > /dev/null; then
              echo "Flask app is up and running."
              break
            fi
            echo "Waiting for Flask app..."
            sleep 10
          done
          curl -s http://localhost:5001 || { echo "Flask app failed to start."; exit 1; }

      # # Ensure the Target is Reachable
      # - name: Check if target is reachable
      #   run: curl -v hhttp://10.1.0.1:5001 || exit 1
      
      # Run OWASP ZAP Scan (DAST)
      # - name: Get Runner's Internal IP
      #   run: echo "RUNNER_IP=$(ip route | awk 'NR==1 {print $3}')" >> $GITHUB_ENV

      # - name: Manually Run ZAP Baseline Scan
      #   run: |
      #     # echo "Pulling ZAP Image..."
      #     # docker pull ghcr.io/zaproxy/zaproxy:stable
      #     # echo "Adjusting permissions..."
      #     # mkdir -p $(pwd)/zap-wrk
      #     # chmod 777 $(pwd)/zap-wrk
      #     # echo "Determined runner's internal IP: $RUNNER_IP"
      #     # echo "Starting ZAP Baseline Scan..."
      #     # docker run --rm --network=my_custom_network ghcr.io/zaproxy/zaproxy:stable zap-baseline.py \
      #     #   -t http://flask-app:5001 \
      #     #   -J zap_report.json \
      #     #   -r zap_report.html \
      #     #   - d
      - name: Adjust permissions for ZAP
        run: |
          mkdir -p zap_output
          chmod 777 zap_output  # Give full permissions

      - name: Run OWASP ZAP Scan
        uses: zaproxy/action-full-scan@v0.7.0
        with:
          target: 'http://localhost:5001'
          cmd_options: '-I -J zap_output/zap_report.json -r zap_output/zap_report.html'

      # Publish ZAP Report to GitHub Pages
      - name: Verify and Publish ZAP Reports
        run: |
          # Debug output directory
          ls -lah zap_output

          # Check if JSON and HTML reports exist
          if [ ! -f zap_output/zap_report.json ]; then
            echo "❌ Error: zap_report.json not found! ZAP scan may have failed."
            exit 1
          fi

          if [ ! -f zap_output/zap_report.html ]; then
           echo "❌ Error: zap_report.html not found!"
           exit 1
          fi

          mv zap_output/zap_report.html zap_report.html
          mv zap_output/zap_report.json zap_report.json
      
          # REPORT_NAME="zap_report_$(date +'%Y%m%d%H%M%S').html"
          # mv zap_output/zap_report.html $REPORT_NAME
          git config --global user.name "github-actions"
          git config --global user.email "actions@github.com"

          git fetch origin gh-pages || echo "gh-pages branch does not exist yet."
          if ! git rev-parse --verify gh-pages >/dev/null 2>&1; then
            echo "Creating gh-pages branch..."
            git checkout --orphan gh-pages
            git commit --allow-empty -m "Initial commit for GitHub Pages"
            git push origin gh-pages
          else
            git checkout gh-pages
            git pull --rebase origin gh-pages
          fi
          cp zap_report.html index.html
          git add index.html zap_report.json
          git commit -m "Publish ZAP report (Run ID: $GITHUB_RUN_ID)"
          git push origin gh-pages
      # - name: Publish ZAP Report to GitHub Pages
      #   run: |
      #     # Check if the report exists
      #     if [ ! -f zap_report.html ]; then
      #       echo "❌ Error: zap_report.html not found! ZAP scan may have failed."
      #       exit 1
      #     fi

      #     # Rename the report with a timestamp
      #     REPORT_NAME="zap_report_$(date +'%Y%m%d%H%M%S').html"
      #     mv zap_report.html $REPORT_NAME

      #     # Configure Git user for commit
      #     git config --global user.name "github-actions"
      #     git config --global user.email "actions@github.com"

      #     # Fetch the latest changes from gh-pages branch
      #     git fetch origin
      #     git checkout gh-pages || git checkout --orphan gh-pages
      #     git pull --rebase origin gh-pages

      #     # Push the new report to gh-pages branch
      #     echo "Pushing new ZAP report to GitHub Pages..."
      #     cp $REPORT_NAME index.html
      #     git add index.html
      #     git commit -m "Publish ZAP report: $REPORT_NAME (Run ID: $GITHUB_RUN_ID)"
      #     git push origin gh-pages


      # Clean up Flask application container
      - name: Stop and Remove Flask App
        if: always()
        run: |
          docker stop flask-app
          docker rm flask-app

      # Secure Secrets Injection
      - name: Inject Secrets Securely
        run: |
          echo ${{ secrets.SECRET_KEY }} > .env
          echo ${{ secrets.DATABASE_URL }} >> .env

      # Push Docker Image to Docker Hub
      - name: Push Docker Image to Docker Hub
        run: |
          docker tag $IMAGE_NAME ${{ secrets.DOCKER_USERNAME }}/$IMAGE_NAME:latest
          docker push ${{ secrets.DOCKER_USERNAME }}/$IMAGE_NAME:latest
